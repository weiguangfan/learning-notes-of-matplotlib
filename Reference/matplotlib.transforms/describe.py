"""
Matplotlib包括一个任意几何变换的框架，用于确定画布上所有元素的最终位置。

变换是由TransformNode对象组成的树，其实际价值取决于它们的子节点。
当子节点的内容发生变化时，它们的父节点会自动失效。
在下一次访问一个无效的变换时，它将被重新计算以反映这些变化。
这种无效化/缓存方法可以防止对变换进行不必要的重新计算，并有助于提高交互性能。

例如，这里是一个用于将数据绘制成图的转换树的图。

该框架既可用于仿生变换，也可用于非仿生变换。
然而，为了提高速度，我们希望尽可能使用后端渲染器来执行仿射变换。
因此，我们可以在一组数据上只执行变换的仿生或非仿生部分。
仿射的部分总是被认为发生在非仿射的部分之后。
对于任何变换:
full transform == non-affine part + affine part

后端不应该自己处理非affine的变换。

关于如何使用变换的例子，请参见变换教程。
"""






